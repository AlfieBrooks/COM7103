services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=15692'

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      args:
        PROJECT: api
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 5000
    env_file:
      - ./apps/api/.env
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - IMAGE_API_URL=http://nginx/image-generator/api/v1
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:5000/health']
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    networks:
      - backend
      - api_gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=5000'

  image-generator:
    build:
      context: .
      dockerfile: ./apps/image-generator/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 4000
    env_file:
      - ./apps/image-generator/.env
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3
    networks:
      - backend
      - api_gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=4000'

  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    ports:
      - 3000
    env_file:
      - ./apps/frontend/.env
    environment:
      - VITE_API_URL=http://nginx/api/api/v1
      - VITE_IMAGE_API_URL=http://nginx/image-generator/api/v1
    networks:
      - frontend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      api:
        condition: service_healthy
      image-generator:
        condition: service_healthy
      frontend:
        condition: service_started
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - 80:80
    networks:
      - frontend
      - api_gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=80'

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus:/etc/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - backend
      - api_gateway

  grafana:
    image: grafana/grafana:8.2.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    ports:
      - '3000:3000'
    networks:
      - api_gateway
    depends_on:
      - prometheus

  autoscaler:
    build: ./autoscaler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '5050:5050'
    depends_on:
      - alertmanager
    networks:
      - backend

  alertmanager:
    image: prom/alertmanager:v0.23.0
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - '9093:9093'
    networks:
      - backend

  locust:
    build:
      context: ./stress-test
    container_name: locust
    ports:
      - '8089:8089'
    volumes:
      - ./stress-test:/app
    networks:
      - backend
      - frontend
      - api_gateway
    depends_on:
      - nginx

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  api_gateway:
    driver: bridge

volumes:
  rabbitmq_data:
  rabbitmq_log:
  prometheus_data:
  grafana_data:
